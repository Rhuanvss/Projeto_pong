// Arquivo: PongGame.jack
// Gerencia a lógica de um jogo Pong para dois jogadores com movimento automático.

class PongGame {
    static PongGame instance; // Instância única do jogo (singleton)
    
    // Objetos do jogo
    field Bat botbat;     // Raquete inferior (Jogador 1)
    field Bat topbat;     // Raquete superior (Jogador 2)
    field Ball ball;
    
    // Variáveis de estado do jogo
    field boolean exit;   // Verdadeiro quando o jogo deve terminar
    field int winner;     // Registra o vencedor: 1 ou 2. 0 se ninguém venceu.
    field int wall;       // Parede em que a bola colidiu
    field int lastWall;   // Última parede de colisão para evitar duplicação

    /** Constrói um novo jogo Pong. */
    constructor PongGame new() {
        do Screen.clearScreen();
        
        let botbat = Bat.new(230, 240, 50, 7);
        let topbat = Bat.new(230, 8, 50, 7);
        let ball = Ball.new(253, 222, 0, 511, 16, 239);

        do ball.setDestination(400,0);
        
        let exit = false;
        let winner = 0;
        let wall = 0;
        let lastWall = 0;

        return this;
    }

    /** Cria a instância única do jogo. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Retorna a instância única do jogo. */
    function PongGame getInstance() {
        return instance;
    }

    /** Libera a memória de todos os objetos criados. */
    method void dispose() {
        do botbat.dispose();
        do topbat.dispose();
        do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Inicia o loop principal do jogo e gerencia as entradas e o estado. */
  // Dentro do arquivo PongGame.jack, substitua apenas o método run()

    method void run() { 
        var char key;

        while (~exit) { 
            do botbat.move();
            do topbat.move();

            let key = Keyboard.keyPressed();

            if (~(key = 0)) {
                // Controles do Jogador 1 (Raquete de baixo)
                if (key = 130) { do botbat.setDirection(1); } // Seta Esquerda
                if (key = 132) { do botbat.setDirection(2); } // Seta Direita
                if (key = 131) { do botbat.setDirection(0); } // Seta Baixo (PARA)

                // Controles do Jogador 2 (Raquete de cima)
                if (key = 97) { do topbat.setDirection(1); }  // Tecla 'a'
                if (key = 100) { do topbat.setDirection(2); } // Tecla 'd'
                if (key = 115) { do topbat.setDirection(0); } // Tecla 's' (PARA)

                // Tecla 'q' (ASCII 113) para sair
                if (key = 113) {
                    let exit = true;
                }
            }
            
            do moveBall(); 
            
            // VELOCIDADE DIMINUÍDA NOVAMENTE
            // A pausa foi aumentada para 30 para deixar o jogo mais lento.
            do Sys.wait(30); 
        }

        // Tela de Fim de Jogo
        if (winner > 0) {
            do Output.moveCursor(10, 20);
            do Output.printString("Game Over");
            do Output.moveCursor(12, 18);
            if (winner = 1) {
                do Output.printString("Jogador 1 Venceu!");
            } else {
                do Output.printString("Jogador 2 Venceu!");
            }
        }
        return;
    }

    /** Gerencia o movimento da bola e as colisões. */
    method void moveBall() { 
        var int botbatLeft, botbatRight, topbatLeft, topbatRight, ballLeft, ballRight;
        
        let wall = ball.move();
        
        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();

            // Colisão com a parede inferior (área do Jogador 1)
            if (wall = 4) {
                let botbatLeft = botbat.getLeft();
                let botbatRight = botbat.getRight();
                if ((botbatLeft < ballRight) & (botbatRight > ballLeft)) {
                    do botbat.setWidth(botbat.getWidth() - 2);
                    do ball.bounce(0);
                } else {
                    let winner = 2; // Jogador 2 venceu
                    let exit = true;
                }
            }

            // Colisão com a parede superior (área do Jogador 2)
            if (wall = 3) {
                let topbatLeft = topbat.getLeft();
                let topbatRight = topbat.getRight();
                if ((topbatLeft < ballRight) & (topbatRight > ballLeft)) {
                    do topbat.setWidth(topbat.getWidth() - 2);
                    do ball.bounce(0);
                } else {
                    let winner = 1; // Jogador 1 venceu
                    let exit = true;
                }
            }

            // Colisão com as paredes laterais
            if ((wall = 1) | (wall = 2)) {
                do ball.bounce(0);
            }
        }
        return;
    }
}